syntax = "proto3";

package docker.cluster.api.raft;

import "docker/cluster/objects/objects.proto";
import "gogoproto/gogo.proto";

// Contains one of many protobuf encoded objects to replicate
// over the raft backend with a request ID to track when the
// action is effectively applied
message InternalRaftRequest {
	uint64 id = 1 [(gogoproto.customname) = "ID"];

	repeated StoreAction action = 2;
}

// TODO(stevvooe): Storage actions may belong in another protobuf file. They
// aren't necessarily first-class "types" in the cluster schema.

// StoreActionKind defines the operation to take on the store for the target of
// a storage action.
enum StoreActionKind {
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.enum_customname) = "StoreActionKind";
	UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "StoreActionKindUnknown"]; // default value, invalid
	CREATE = 1 [(gogoproto.enumvalue_customname) = "StoreActionKindCreate"];
	UPDATE = 2 [(gogoproto.enumvalue_customname) = "StoreActionKindUpdate"];
	REMOVE = 3 [(gogoproto.enumvalue_customname) = "StoreActionKindRemove"];
}

// StoreAction defines a taret and operation to apply on the storage system.
message StoreAction {
	StoreActionKind action = 1;
	oneof target {
		objects.Node node = 2;
		objects.Job job = 3;
		objects.Task task = 4;
		objects.Network network = 5;
		objects.Volume volume = 6;
	}
}
