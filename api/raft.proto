syntax = "proto3";

package api;

// NOTE(stevvooe): Make sure your gopath is appropriately set for this to work
// correctly.
import "github.com/coreos/etcd/raft/raftpb/raft.proto";
import weak "gogoproto/gogo.proto";

// Raft defines the RPC communication between raft nodes.
service Raft {

	// Join joins an existing Manager or set of Managers to form
	// a raft cluster for the log replication backend
	rpc Join(JoinRequest) returns (JoinResponse) {}

	// Leave leaves an existing set of Managers running raft
	rpc Leave(LeaveRequest) returns (LeaveResponse) {}

	// ProcessRaftMessage sends a raft message to be processed on a raft member, it is
	// called from the Manager willing to send a message to its destination ('To' field)
	rpc ProcessRaftMessage(ProcessRaftMessageRequest) returns (ProcessRaftMessageResponse) {}
}

message JoinRequest {
	RaftNode node = 1;
}

// TODO(abronan): currently we return the list of existing raft
// members in the join response, the new node must then build
// the raft memberlist by itself.
// Ideally, the node taking care of adding a new node to raft
// should send back this list to the new node, possibly in a
// separate call (gossiping raft member presence before granting
// the raft membership).
message JoinResponse {
	repeated RaftNode members = 1;
}

message LeaveRequest {
	RaftNode node = 1;
}

message LeaveResponse {}

message ProcessRaftMessageRequest {
	raftpb.Message msg = 1;
}

message ProcessRaftMessageResponse {}

// RaftNode represents a raft node to be added or removed from
// an existing raft cluster
message RaftNode {
	uint64 id = 1 [(gogoproto.customname) = "ID"];
	string addr = 2;
}
