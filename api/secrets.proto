syntax = "proto3";

package docker.swarmkit.v1;

import "types.proto";
import "specs.proto";
import "objects.proto";
import "plugin/plugin.proto";
import "gogoproto/gogo.proto";

// Secrets defines the RPC methods for managing/controlling secrets in a cluster.
service Secrets {
	// GetSecret returns a `GetSecretResponse` with a `Secret` with the same
	// id as `GetSecretRequest.SecretID`
	// - Returns `NotFound` if the Secret with the given id is not found.
	// - Returns `InvalidArgument` if the `GetSecretRequest.SecretID` is empty.
	// - Returns an error if getting fails.
	rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {
		option (docker.protobuf.plugin.tls_authorization) = { roles: "swarm-manager" };
	}

	// ListSecrets returns a `ListSecretResponse` with a list all `Secret`s being
	// managed, or all secrets matching any name in `ListSecretsRequest.Names`, any
	// name prefix in `ListSecretsRequest.NamePrefixes`, any id in
	// `ListSecretsRequest.SecretIDs`, or any id prefix in `ListSecretsRequest.IDPrefixes`,
	// filtering by type provided in `ListSecretsRequest.Type`.
	// - Returns an error if listing fails.
	rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
		option (docker.protobuf.plugin.tls_authorization) = { roles: "swarm-manager" };
	}
	// CreateSecret creates and return a `CreateSecretResponse` with a `Secret` based
	// on the provided `CreateSecretRequest.SecretValueSpec`.
	// - Returns `InvalidArgument` if the `CreateSecretRequest.SecretValueSpec` is malformed,
	//   or if the secret data is too long or contains invalid characters.
	// - Returns `AlreadyExists` if the `CreateSecretRequest.SecretValueSpec.Annotation.Name`
	//   conflicts with an existing secret's name.
	// - Returns an error if the creation fails.
	rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {
		option (docker.protobuf.plugin.tls_authorization) = { roles: "swarm-manager" };
	}

	// UpdateSecret adds the `UpdateSecretRequest.SecretValueSpec` to a `Secret``
	// as the latest version, and returns the updated `Secret` in the `UpdateSecretResponse`.
	// - Returns `NotFound` if no secret with name
	//   `UpdateSecretRequest.SecretValueSpec.Annotations.Name` is found.
	// - Returns `InvalidArgument` if the `UpdateSecretRequest.SecretValueSpec` is malformed,
	//   or if the secret data is too long or contains invalid characters.
	// - Returns an error if the update fails.
	rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse) {
		option (docker.protobuf.plugin.tls_authorization) = { roles: "swarm-manager" };
	}

	// RemoveSecret removes a referenced by `RemoveSecretRequest.ID`.  If
	// `RemoveSecretRequest.Version` is not provided, the entire secret and all its
	// versions are removed.  Otherwise, only the version of the secret referenced
	// by `RemoveSecretRequest.Version` is removed from the secret.
	// - Returns `InvalidArgument` if `RemoveSecretRequest.ID` is empty.
	// - Returns `NotFound` if the a secret named `RemoveSecretRequest.ID` is not
	//   found or if it is found but has no version `RemoveSecretRequest.Version`.
	// - Returns an error if the deletion fails.
	rpc RemoveSecret(RemoveSecretRequest) returns (RemoveSecretResponse) {
		option (docker.protobuf.plugin.tls_authorization) = { roles: "swarm-manager" };
	}
}

// GetSecretRequest is the request to get a `Secret` object given a secret id.
message GetSecretRequest {
	string secret_id = 1 [(gogoproto.customname) = "SecretID"];
}

// GetSecretResponse contains the Secret corresponding to the id in
// `GetSecretRequest`, but the `SecretValue.Spec.Data` field in each `SecretValue`
// object in the `Secret` should be nil instead of actually containing
// the secret bytes.
message GetSecretResponse {
	Secret secret = 1;
}

// ListSecretRequest is the request to list all secrets in the secret store,
// or all secrets filtered by (id or id prefix or name or name prefix) and types.
message ListSecretsRequest {
	message Filters {
		repeated string secret_ids = 1 [(gogoproto.customname) = "SecretIDs"];
		repeated string id_prefixes = 2 [(gogoproto.customname) = "IDPrefixes"];
		repeated string names = 3;
		repeated string name_prefixes = 4;
		repeated SecretType types = 5;
	}

	Filters filters = 1;
}

// ListSecretResponse contains a list of all the secrets that match the name or
// name prefix filters provided in `ListSecretRequest`.  The `SecretValue.Spec.Data`
// field in each `SecretValue` object in each `Secret` should be nil instead of
// actually containing the secret bytes.
message ListSecretsResponse {
	repeated Secret secrets = 1;
}

// CreateSecretRequest specifies a new secret (it will not update an existing
// secret) to create.
message CreateSecretRequest {
	SecretValueSpec spec = 1;
}

// CreateSecretResponse contains the newly created `Secret`` corresponding to the
// name in `CreateSecretRequest`.  Since it's a new secret, there should just be
// the one version, and hence only one `SecretValue` object in the `Secret`.
// The `SecretValue.Spec.Data` field should be nil instead of actually
// containing the secret bytes.
message CreateSecretResponse {
	Secret secret = 1;
}

// UpdateSecretRequest specifies a new secret version to add to an existing secret
// of the same name.
message UpdateSecretRequest {
	SecretValueSpec spec = 1;
}

// UpdateSecretResponse contains the Secret corresponding to the name and type of
// the spec provided in `UpdateSecretRequest`, and it should be updated with an
// additional `SecretValue` object containing said spec.  The
// `SecretValue.Spec.Data` field in each `SecretValue` object in the `Secret`
// object should be nil instead of actually containing the secret bytes.
message UpdateSecretResponse {
	Secret secret = 1;
}

// RemoveSecretRequest contains the ID and version (optional) of the secret
// that should be removed.  If no version is provided, the intention is that
// all versions should be removed.
message RemoveSecretRequest {
	string secret_id = 1 [(gogoproto.customname) = "SecretID"];
	string version = 2;
}

// RemoveSecretResponse is an empty object indicating the successful removal of
// a secret.
message RemoveSecretResponse {}
