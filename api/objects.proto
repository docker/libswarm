syntax = "proto3";

package docker.cluster.api;

import "types.proto";
import "specs.proto";
import "timestamp/timestamp.proto"; // TODO(stevvooe): use our own until we fix gogoproto/deepcopy
import "gogoproto/gogo.proto";

// This file contains definitions for all first-class objects in the cluster
// API. Such types typically have a corresponding specification, with the
// naming XXXSpec, but not all.

// Meta contains metadata about objects. Every object contains a meta field.
message Meta {
	// Version tracks the current version of the object.
	Version version = 1 [(gogoproto.nullable) = false];

	// Object timestamps.
	Timestamp created_at = 2;
	Timestamp updated_at = 3;
}

// Node provides the internal node state as seen by the cluster.
message Node {
	// ID specifies the identity of the node.
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	// Spec defines the desired state of the node as specified by the user.
	// The system will honor this and will *never* modify it.
	NodeSpec spec = 3 [(gogoproto.nullable) = false];

	// Description encapsulated the properties of the Node as reported by the
	// agent.
	NodeDescription description = 4;

	// Status provides the current status of the node, as seen by the manager.
	NodeStatus status = 5 [(gogoproto.nullable) = false];
}

// Member provides informations about the state of a manager in the cluster.
// A Member is essentially a Manager but from a Raft membership perspective
// TODO(abronan): this is probably not an appropriate name for a top level object (specific to raft),
// we should consider picking a new name
// TODO(aluzzardi): This should contain Meta.
message Member {
	// ID specifies the identity of the manager. This is the ID used for client interaction with the server.
	string id = 1 [(gogoproto.customname) = "ID"];

	// RaftID specifies the internal ID used by the manager in a raft context, it can never be modified
	// and is used only for information purposes
	uint64 raft_id = 2 [(gogoproto.customname) = "RaftID"];

	// Addr specifies the address of the member
	string addr = 3;

	// MemberSpec declares labels applied to the Manager, for example node name or cluster it
	// belongs to in multi region scenarios
	MemberSpec spec = 4;

	// Status provides the current status of the manager from the perspective of another manager.
	MemberStatus status = 5 [(gogoproto.nullable) = false];
}

message Service {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	ServiceSpec spec = 3 [(gogoproto.nullable) = false];

	// Runtime state of service endpoint. This may be different
	// from the spec version because the user may not have entered
	// the optional fields like node_port or virtual_ip and it
	// could be auto allocated by the system.
	Endpoint endpoint = 4;
}

// Task specifies the parameters for implementing a Spec. A task is effectively
// immutable and idempotent. Once it is dispatched to a node, it will not be
// dispatched to another node.
message Task {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	// ServiceID indicates the service under which this task is orchestrated. This
	// should almost always be set.
	string service_id = 3 [(gogoproto.customname) = "ServiceID"];

	// Instance is the instance number for a task. For example, if a
	// running service has instances = 2, there will be a task with
	// instance = 1, and another with instance = 2.
	uint64 instance = 4;

	// NodeID indicates the node to which the task is assigned. If this field
	// is empty or not set, the task is unassigned.
	string node_id = 5 [(gogoproto.customname) = "NodeID"];

	// Annotations inherits labels from the ServiceSpec.Annotations associated
	// with this task. It may include other labels added by the manager. The
	// name will be a human readable name, calculated based on the
	// ServiceSpec.Annotations.Name field.
	Annotations annotations = 6 [(gogoproto.nullable) = false];

	// Task carries the runtime information which by itself carries the
	// spec for the runtime. For e.g. Container contains ContainerSpec.
	oneof runtime {
		Container container = 7;
	}

	TaskStatus status = 8 [(gogoproto.nullable) = false];

	// DesiredState is the target state for the task. It is set to
	// TaskStateRunning when a task is first created, and changed to
	// TaskStateDead if the manager wants to terminate the task. This field
	// is only written by the manager.
	TaskState desired_state = 9;
}

// Container contains all runtime state of a task which is container runtime specific.
message Container {
	// Spec defines the container specific configuration for this container.
	ContainerSpec spec = 1 [(gogoproto.nullable) = false];

	message NetworkAttachment {
		// Network state as a whole becomes part of Task so
		// that it always is available for use in agents so
		// that agents don't have any other dependency during execution.
		Network network = 1;

		// List of IPv4/IPv6 addresses that are assigned to the task
		// as part of getting attached to this network.
		repeated string addresses = 2;
	}

	repeated NetworkAttachment networks = 2;

	// A copy of runtime state of service endpoint from Service
	// object to be distributed to agents as part of the task.
	Endpoint endpoint = 3;

	// Volumes enumerates the volume declarations needed to satisfy the mounts which use plugins
	// used by this container
	repeated Volume volumes = 4;
}

message Volume {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	VolumeSpec spec = 3 [(gogoproto.nullable) = false];
}

message Network {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	NetworkSpec spec = 3 [(gogoproto.nullable) = false];

	// Driver specific operational state provided by the network driver.
	Driver driver_state = 4;

	// Runtime state of IPAM options. This may not reflect the
	// ipam options from NetworkSpec.
	IPAMOptions ipam = 5 [(gogoproto.customname) = "IPAM"];
}

message RegisteredCertificate {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	RegisteredCertificateSpec spec = 3 [(gogoproto.nullable) = false];

	string role = 4;

	bytes csr = 5 [(gogoproto.customname) = "CSR"];

	IssuanceStatus status = 6 [(gogoproto.nullable) = false];

	bytes certificate = 7;

	// CN represents the node ID.
	string cn = 8 [(gogoproto.customname) = "CN"];
}

// Cluster provides global cluster settings.
message Cluster {
	string id = 1 [(gogoproto.customname) = "ID"];

	Meta meta = 2 [(gogoproto.nullable) = false];

	ClusterSpec spec = 3 [(gogoproto.nullable) = false];
}
