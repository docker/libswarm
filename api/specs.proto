syntax = "proto3";

package docker.cluster.api;

import "types.proto";
import "gogoproto/gogo.proto";

// Specs are container objects for user provided input. All creations and
// updates are done through spec types. As a convention, user input from a spec
// is never touched in created objects. This allows one to verify that the
// users intent has not been modified.
//
// Put differently, spec types can be said to represent the desired state of
// the system. In situations where modifications need to be made to a
// particular component, API objects will either have a copy of the spec
// component or a different representation to reflect allocation or resolution.

// Annotations provide useful information to identify API objects. They are
// common to all API specs.
message Annotations {
	string name = 1;
	map<string, string> labels = 2;
}

message NodeSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];

	enum Role {
		option (gogoproto.goproto_enum_prefix) = false;

		WORKER = 0 [(gogoproto.enumvalue_customname) = "NodeRoleWorker"];
		MANAGER = 1 [(gogoproto.enumvalue_customname) = "NodeRoleManager"];
	}

	enum Acceptance {
		option (gogoproto.goproto_enum_prefix) = false;

		PENDING = 0 [(gogoproto.enumvalue_customname) = "NodeAcceptancePending"];
		ACCEPT = 1 [(gogoproto.enumvalue_customname) = "NodeAcceptanceAccept"];
		REJECT = 2 [(gogoproto.enumvalue_customname) = "NodeAcceptanceReject"];
	}

	enum Availability {
		option (gogoproto.goproto_enum_prefix) = false;

		// Active nodes.
		ACTIVE = 0 [(gogoproto.enumvalue_customname) = "NodeAvailabilityActive"];

		// Paused nodes won't be considered by the scheduler, preventing any
		// further task to run on them.
		PAUSE = 1 [(gogoproto.enumvalue_customname) = "NodeAvailabilityPause"];

		// Drained nodes are paused and any task already running on them will
		// be evicted.
		DRAIN = 2 [(gogoproto.enumvalue_customname) = "NodeAvailabilityDrain"];
	}

	// Role defines the role the node should have.
	Role role = 2;

	// Acceptance controls the admission of the node into the cluster.
	Acceptance acceptance = 3;

	// Availability allows a user to control the current scheduling status of a
	// node.
	Availability availability = 4;
}

message ManagerSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];
}

// ServiceSpec defines the properties of a service.
//
// A service instructs the cluster in orchestrating repeated instances of a
// template, implemented as tasks. Based on the number of instances, scheduling
// strategy and restart policy, a number of application-level behaviors can be
// defined.
message ServiceSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];

	// RuntimeSpec defines the base runtime specific configuration
	// for tasks created for this service.
	oneof runtime_spec {
		ContainerSpec container = 2;
	}

	oneof mode {
		ReplicatedService replicated = 3;
		GlobalService global = 4;
	}

	// RestartPolicy specifies what to do when a task fails or finishes.
	RestartPolicy restart = 5;

	// Placement specifies constraints and distribution preference.
	Placement placement = 6;

	// UpdateConfig controls the rate and policy of updates.
	UpdateConfig update = 7;

	// NetworkAttachmentSpec describes which networks the target
	// runtime is attached to.
	message NetworkAttachment {
		oneof reference {
			string name = 1;
			string network_id = 2 [(gogoproto.customname) = "NetworkID"];
		}
	}

	repeated NetworkAttachment networks = 8;

	// Service endpoint specifies the user provided configuration
	// to properly discover and load balance a service.
	EndpointSpec endpoint = 9;
}

// ReplicatedService set the reconcilation target to certain number of instances.
message ReplicatedService {
	uint64 instances = 1;
}

// GlobalService represent global service.
message GlobalService {
	// Empty message for now.
}

// Container specifies runtime parameters for a container.
message ContainerSpec {
	// image defines the image reference, as specified in the
	// distribution/reference package. This may include a registry host, name,
	// tag or digest.
	//
	// The field will be directly passed to the engine pulling. Well-behaved
	// service definitions will used immutable references, either through tags
	// that don't change or verifiable digests.
	string image = 1;

	// Command to run the the container. The first element is a path to the
	// executable and the following elements are treated as arguments.
	//
	// If command is empty, execution will fall back to the image's entrypoint.
	repeated string command = 2;

	// Args specifies arguments provided to the image's entrypoint.
	// Ignored if command is specified.
	repeated string args = 3;

	// Env specifies the environment variables for the container in NAME=VALUE
	// format. These must be compliant with  [IEEE Std
	// 1003.1-2001](http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html).
	repeated string env = 4;

	// Dir defines the working directory to set for the container process.
	string dir = 5;

	// User specifies the user that should be employed to run the container.
	string user = 6;

	repeated Mount mounts = 7;

	// Resource requirements for the container.
	ResourceRequirements resources = 8;

	// StopGracePeriod the grace period for stopping the container before
	// forcefully killing the container.
	uint64 stop_grace_period = 9 [(gogoproto.customtype) = "time.Duration", (gogoproto.nullable) = false];
}

// EndpointSpec defines the properties that can be configured to
// access and loadbalance the service.
message EndpointSpec {
	// Load balancer strategy to be used by the ingress service to
	// choose between different strategies available.
	enum IngressStrategy {
		option (gogoproto.goproto_enum_prefix) = false;

		// Network loadbalancer strategy is the default
		// ingress strategy (needs to be of value 0) and it
		// provides loadbalancing at L3/L4. It uses the node
		// ports to loadbalance ingress traffic to the right
		// service.
		NETWORK = 0 [(gogoproto.enumvalue_customname) = "IngressStrategyNetwork"];

		// If the user chooses to disable ingress strategy,
		// the system will not provide any out of the box
		// loadbalancing for ingress traffic. The user may
		// provide an alternate option.
		DISABLED = 1 [(gogoproto.enumvalue_customname) = "IngressStrategyExternal"];
	}

	IngressStrategy strategy = 1;

	// List of exposed ports that this service is accessible from
	// external to the cluster.
	repeated PortConfig exposed_ports = 2;
}

// VolumeSpec defines the properties of a Volume.
message VolumeSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];
	Driver driver_configuration = 2;
}

// NetworkSpec specifies user defined network parameters.
message NetworkSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];

	// Driver specific configuration consumed by the network driver.
	Driver driver_configuration = 2;

	// IPv6Enabled enables support for IPv6 on the network.
	bool ipv6_enabled = 3;

	// internal restricts external access to the network. This may be
	// accomplished by disabling the default gateway or through other means.
	bool internal = 4;

	IPAMOptions ipam = 5 [(gogoproto.customname) = "IPAM"];
}

// ClusterSpec specifies global cluster settings.
message ClusterSpec {
	Annotations annotations = 1 [(gogoproto.nullable) = false];

	// AcceptancePolicy defines the certificate issuance policy.
	AcceptancePolicy acceptance_policy = 2 [(gogoproto.nullable) = false];

	// Orchestration defines cluster-level orchestration settings.
	OrchestrationConfig orchestration = 3 [(gogoproto.nullable) = false];

	// Raft defines the cluster's raft settings.
	RaftConfig raft = 4 [(gogoproto.nullable) = false];

	// Dispatcher defines cluster-level dispatcher settings.
	DispatcherConfig dispatcher = 5 [(gogoproto.nullable) = false];
}
