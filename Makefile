# Set an output prefix, which is the local directory if not specified.
PREFIX?=$(shell pwd)

# Used to populate version variable in main package.
VERSION=$(shell git describe --match 'v[0-9]*' --dirty='.m' --always)

# Project packages.
PACKAGES=$(shell go list ./... | grep -v /vendor/ | grep -v /test/)

GO_LDFLAGS=-ldflags "-X `go list ./version`.Version=$(VERSION)"

.PHONY: clean all fmt vet lint errcheck build binaries test setup checkprotos coverage ci check help
.DEFAULT: default

all: check build binaries test ## run fmt, vet, lint, errcheck build the binaries and run the tests

check: fmt vet lint errcheck ## run fmt, vet, lint and errcheck

ci: check build binaries checkprotos test-integration coverage ## to be used by the CI

AUTHORS: .mailmap .git/HEAD
	git log --format='%aN <%aE>' | sort -fu > $@

# This only needs to be generated by hand when cutting full releases.
version/version.go:
	./version/version.sh > $@

${PREFIX}/bin/swarmctl: version/version.go $(shell find . -type f -name '*.go')
	@echo "üê≥ $@"
	@go build -i -tags "${DOCKER_BUILDTAGS}" -o $@ ${GO_LDFLAGS}  ${GO_GCFLAGS} ./cmd/swarmctl

${PREFIX}/bin/swarmd: version/version.go $(shell find . -type f -name '*.go')
	@echo "üê≥ $@"
	@go build -i -tags "${DOCKER_BUILDTAGS}" -o $@ ${GO_LDFLAGS}  ${GO_GCFLAGS} ./cmd/swarmd

${PREFIX}/bin/swarm-bench: version/version.go $(shell find . -type f -name '*.go')
	@echo "üê≥ $@"
	@go build -i -tags "${DOCKER_BUILDTAGS}" -o $@ ${GO_LDFLAGS}  ${GO_GCFLAGS} ./cmd/swarm-bench

${PREFIX}/bin/protoc-gen-gogoswarm: version/version.go $(shell find . -type f -name '*.go')
	@echo "üê≥ $@"
	@go build -i -tags "${DOCKER_BUILDTAGS}" -o $@ ${GO_LDFLAGS}  ${GO_GCFLAGS} ./cmd/protoc-gen-gogoswarm

setup: ## install dependencies
	@echo "üê≥ $@"
	# TODO(stevvooe): Install these from the vendor directory
	@go get -u github.com/golang/lint/golint
	@go get -u github.com/kisielk/errcheck
	@go get -u github.com/golang/mock/mockgen

generate: ${PREFIX}/bin/protoc-gen-gogoswarm ## generate protobufs
	@echo "üê≥ $@"
	@PATH=${PREFIX}/bin:${PATH} go generate -x ${PACKAGES}

checkprotos: generate ## check if protobufs needs to be generated again
	@echo "üê≥ $@"
	@test -z "$$(git status --short | grep ".pb.go" | tee /dev/stderr)" || \
		(echo "üëπ please run 'make generate' when making changes to proto files" && false)

# Depends on binaries because vet will silently fail if it can't load compiled
# imports
vet: binaries ## run go vet
	@echo "üê≥ $@"
	@test -z "$$(go vet ${PACKAGES} 2>&1 | grep -v 'constant [0-9]* not a string in call to Errorf' | grep -v 'exit status 1' | tee /dev/stderr)"

fmt: ## run go fmt
	@echo "üê≥ $@"
	@test -z "$$(gofmt -s -l . | grep -v vendor/ | grep -v ".pb.go$$" | tee /dev/stderr)" || \
		(echo "üëπ please format Go code with 'gofmt -s'" && false)
	@test -z "$$(find . -path ./vendor -prune -o -name '*.proto' -type f -exec grep -Hn -e "^ " {} \; | tee /dev/stderr)" || \
		(echo "üëπ please indent proto files with tabs only" && false)
	@test -z "$$(find . -path ./vendor -prune -o -name '*.proto' -type f -exec grep -Hn "id = " {} \; | grep -v gogoproto.customname | tee /dev/stderr)" || \
		(echo "üëπ id fields in proto files must have a gogoproto.customname set" && false)
	@test -z "$$(find . -path ./vendor -prune -o -name '*.proto' -type f -exec grep -Hn "Meta meta = " {} \; | grep -v '(gogoproto.nullable) = false' | tee /dev/stderr)" || \
		(echo "üëπ meta fields in proto files must have option (gogoproto.nullable) = false" && false)


lint: ## run go lint
	@echo "üê≥ $@"
	@test -z "$$(golint ./... | grep -v vendor/ | grep -v ".pb.go:" | grep -v ".mock.go" | tee /dev/stderr)"

errcheck: ## run go errcheck
	@echo "üê≥ $@"
	@test -z "$$(golint ./... | grep -v vendor/ | grep -v ".pb.go:" | grep -v ".mock.go" | tee /dev/stderr)"

build: ## build the go packages
	@echo "üê≥ $@"
	@go build -i -tags "${DOCKER_BUILDTAGS}" -v ${GO_LDFLAGS} ${GO_GCFLAGS} ${PACKAGES}

test: ## run tests
	@echo "üê≥ $@"
	@go test -parallel 8 -race -tags "${DOCKER_BUILDTAGS}" ${PACKAGES}

test-integration: binaries ## run integration tests
	@echo "üê≥ $@"
	@PATH=${PREFIX}/bin:${PATH} go test "${DOCKER_BUILDTAGS}" ./test/...

binaries: ${PREFIX}/bin/swarmctl ${PREFIX}/bin/swarmd ${PREFIX}/bin/swarm-bench ${PREFIX}/bin/protoc-gen-gogoswarm ## build the binaries
	@echo "üê≥ $@"

clean: ## clean up binaries
	@echo "üê≥ $@"
	@rm -rf "${PREFIX}/bin/swarmctl" "${PREFIX}/bin/swarmd" "${PREFIX}/bin/protoc-gen-gogoswarm"

coverage: ## generate coverprofiles from the tests
	@echo "üê≥ $@"
	@( for pkg in ${PACKAGES}; do \
		go test -i -tags "${DOCKER_BUILDTAGS}" -test.short -coverprofile="../../../$$pkg/coverage.txt" -covermode=count $$pkg || exit; \
		go test -tags "${DOCKER_BUILDTAGS}" -test.short -coverprofile="../../../$$pkg/coverage.txt" -covermode=count $$pkg || exit; \
	done )

help: ## this help
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort
